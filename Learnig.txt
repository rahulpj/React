We can return only one html element in jsx so we wrap it inside fragment and empty tag
In Vite it is maditory to name a file with .jsx extension
We need to keep the names of all the components starting with capital letter
It is good convention to keep all the components file starting with the capital letter

In vite index.js script is added to index.html using script tag
React is a library not a framework and it is a single page application(only one html file that is index.html)


why we need hooks?

suppose we are using the same variable in 4 to 5 Ui components so when the value of variable changes we need select all those components with the help of DOM and change everywhere no here comes the use of react we simply use the state varibles and hooks that are provided by react we just change the values as per our needs and react takes care of the changes in the UI component.

Interview question :- Counter Project

bgChanger :- learned that onClick function requires a whole function not the execution of that function which is with parenthesis because it will return the value which function returns but the onClick want the whole function 

passwordGenerator :- Got to know about useEffect,useCallback and useRef hooks. useCallback caches the function defination between consecutive renders.useEffect executes the function based on dependency changes.useRef lets you reference a value that's not needed for rendering

currencyConvertor :- In this we created a custom hook for fetching the data from api using useEffect and useState inside and calling that custom hook in APP. Also reused the inputbox component passed multiple props. Then created the state variables to manage the state implemented the swap and convert functionality.
When a parent re-renders, all its child components re-render by default. 

ReactRouterDom :- In react we do not use a tag because if we use a tag the whole page reloads which is not good in place of it we use Link tag. Whereas NavLink is also used for navigating while also managing the "active" state of the link
The <Outlet> component is a key feature in React Router DOM used for nested routing.

to optimise more we use loader from react router dom which when we click on nav component start or make the call to apis at the same time rather than using useEffect which call when the component mounts.

We use useParams hook to access the the path variables and also useLoaderData hook to access the data from the loader

Context API:-
The Context API in React is a tool that allows you to share state and data across components without prop drilling (i.e., passing props through multiple levels).

For large-scale applications, use state management libraries like Redux or Zustand for better performance and scalability.

Steps:-
1) First creating user context using React.createContext
2) Creating ContextProvider with the help of context created and wraping the children with this provider where we need to use the context.
3) Use the context you created with the help of useContext hook 